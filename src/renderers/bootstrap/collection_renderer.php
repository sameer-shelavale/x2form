<?php
namespace X2Form\Renderers\Bootstrap;

class CollectionRenderer {
    var $elementRenderer;


    /*****************************************************************************
     * function render()
     * 		renders the Collection HTML.
     * returns:
     * 		the rendered HTML as string.
     * 		Note that it does'nt send output to screen
     ****************************************************************************/
    public function render( &$collection ){

        $collection->finalize();

        $html = $this->renderList( $collection );

        $collection->schema->index = 'X2F_INDEX';
        $addHtml = '<tr>';
        foreach( $collection->schema->elements as $i => $elem ){
            $addHtml .= '<td>'.$this->elementRenderer->render( $elem ).'</td>';
        }
        $addHtml .= '</tr>';

        if( isset( $collection->attributes['showbbuttons'] ) && $collection->attributes['showbbuttons'] != 'false' ){
            $html .= '<input type="button" value="Add" class="btn btn-success" onclick="AddToX2'.$collection->parent->name.'_'.$collection->name.'_list()" />
					<input type="button" value="Remove"  class="btn btn-danger" onclick="RemoveFromX2'.$collection->parent->name.'_'.$collection->name.'_list()" />
			';
        }

        $js = '

		<script type="text/javascript">
			var  '.$collection->parent->name.'_'.$collection->name.'_count = '.$collection->elements->count().';
			function AddToX2'.$collection->parent->name.'_'.$collection->name.'_list( ){
				var tmp = \''.$addHtml. '\';
				tmp = tmp.replace( /X2F_INDEX/gi, '.$collection->parent->name.'_'.$collection->name.'_count );
				$(\'#'.$collection->parent->name.'_'.$collection->name.'_list tr:last\').after(tmp);
				'.$collection->parent->name.'_'.$collection->name.'_count ++;
			}

			function RemoveFromX2'.$collection->parent->name.'_'.$collection->name.'_list( ){
				$(\'#'.$collection->parent->name.'_'.$collection->name.'_list tr:last\').remove();
				'.$collection->parent->name.'_'.$collection->name.'_count--;
			}
		</script>';



        $html .= $js;
        return $html;
    }

    public function renderTemplate(){

    }

    public function renderRaw(){

    }


    /*****************************************************************************
     * function renderList()
     * 		renders a list of field sets in the Collection, with the fields
     * 		arranged horizontally in a row.
     * 		Generally this is called by render() function.
     * returns:
     * 		the rendered HTML as string.
     * 		Note that it does'nt send output to screen
     ****************************************************************************/
    public function renderList( &$collection ){
        $html = '<div class="table-responsive"><table class="table table-hover table-striped" id="'.$collection->parent->name.'_'.$collection->name.'_list">';
        $html .= $this->renderListHeader( $collection );
        foreach( $collection->elements as $i => $subForm ){
            $html .= '<tr>';
            foreach( $subForm->elements as $elem ){
                $html .= '<td>'.$this->elementRenderer->render( $elem ).'</td>';
            }
            $html .= '</tr>';
        }
        $html .= '</table></div>';

        return $html;
    }


    /*****************************************************************************
     * function renderListHeader()
     * 		renders a row of column titles for the list generated by renderList().
     * 		Generally this is called by renderList() function.
     * returns:
     * 		the rendered HTML as string.
     * 		Note that it does'nt send output to screen
     ****************************************************************************/
    public function renderListHeader( &$collection ){
        $header = '<tr>';
        foreach( $collection->schema->elements as $elem ){
            $header .= '<th>'.$elem->label().'</th>';
        }
        $header .= '</tr>';
        return $header;
    }

    public function renderListRaw(){

    }

    public function renderListTemplate(){

    }
}